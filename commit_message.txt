feat: 무기별 공격 속성 구현

이 커밋은 전투 시스템을 개선하기 위해 무기별 공격 속성을 도입합니다.

변경 사항은 다음과 같습니다:

- **`item.js`**:
    - `Item` 클래스 생성자를 확장하여 `damage`, `attackSpeedMultiplier`, `attackType`, `specialEffect` 속성을 포함하도록 했습니다.
    - 이 속성들은 이제 각 `Item` (무기)의 인스턴스 변수로 저장됩니다.

- **`main.js`**:
    - `WEAPON_DATA` 객체를 업데이트하여 모든 무기(근접, 원거리, 황금 버전)에 대한 `damage`, `attackSpeedMultiplier`, `attackType`, `specialEffect`를 정의했습니다.
        - 근접 무기(검, 양날 도끼, 단검, 양손 망치)는 이제 특성에 따라 이러한 속성에 대한 고유한 값을 가집니다.
        - 원거리 및 황금 무기에는 이러한 새 속성에 대한 플레이스홀더 값이 있습니다.
    - `CreateWeapons()`에서 `Item` 인스턴스화를 수정하여 이 새 속성들을 `Item` 생성자에 전달하도록 했습니다.
    - `UpdateCombat()`에서 NPC 피해 적용을 고정된 값 대신 `player.currentAttackDamage`를 사용하도록 업데이트했습니다.

- **`player.js`**:
    - `Player` 클래스 생성자에 `this.currentAttackDamage` 속성을 추가하고 0으로 초기화했습니다.
    - `OnKeyDown_`의 `KeyJ` (공격) 로직을 수정하여 장착된 무기의 속성(또는 맨손 기본값)에 따라 `this.currentAttackRadius`, `this.currentAttackAngle`, `this.currentAttackDamage`, `this.swordSlashCooldown_`를 동적으로 설정하도록 했습니다.

---

feat: Implement weapon-specific attack properties

This commit introduces weapon-specific attack properties to enhance the combat system.

Changes include:

- **`item.js`**:
    - Extended the `Item` class constructor to include `damage`, `attackSpeedMultiplier`, `attackType`, and `specialEffect` properties.
    - These properties are now stored as instance variables for each `Item` (weapon).

- **`main.js`**:
    - Updated the `WEAPON_DATA` object to define `damage`, `attackSpeedMultiplier`, `attackType`, and `specialEffect` for all weapons (melee, ranged, and golden versions).
        - Melee weapons (Sword, Axe_Double, Dagger, Hammer_Double) now have distinct values for these properties based on their characteristics.
        - Ranged and golden weapons have placeholder values for these new properties.
    - Modified the `Item` instantiation in `CreateWeapons()` to pass these new properties to the `Item` constructor.
    - Updated the NPC damage application in `UpdateCombat()` to use `player.currentAttackDamage` instead of a fixed value.

- **`player.js`**:
    - Added `this.currentAttackDamage` property to the `Player` class constructor, initialized to 0.
    - Modified the `KeyJ` (attack) logic in `OnKeyDown_` to dynamically set `this.currentAttackRadius`, `this.currentAttackAngle`, `this.currentAttackDamage`, and `this.swordSlashCooldown_` based on the `equippedWeapon_`'s properties. Bare-hand defaults are used if no weapon is equipped.